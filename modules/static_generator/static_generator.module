<?php

/**
 * @file
 * Generates a static version of a Drupal site.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 *
 * @param $route_name
 * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
 *
 * @return string
 */
function static_generator_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.static_generator':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Static Generator module generates a static version of a Drupal site. For more information, see the <a href=":static_generator-documentation">online documentation for the Static Generator module</a>.', [':static_generator-documentation' => 'https://www.drupal.org/documentation/modules/static_generator']) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Creating a read only "brochure" site.') . '</dt>';
      $output .= '<dd>' . t('Creating a hybrid static/dynamic site') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_ENTITY_postsave().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function static_generator_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
  process_workflow($entity, 'insert');
}

/**
 * Implements hook_entity_update().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function static_generator_entity_update(EntityInterface $entity) {
  process_workflow($entity, 'update');
}

/**
 * Utility function fo hand workflow real time generation.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @param $operation
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function process_workflow(EntityInterface $entity, $operation) {

  // @todo need some sortof check here
  //  if (!isset($entity->moderation_state)) {
  //    return;
  //  }

  // Node.
  if ($entity->getEntityTypeId() === 'node') {

    $bundles_string = \Drupal::service('config.factory')
      ->get('static_generator.settings')
      ->get('gen_node');
    $bundles = explode(',', $bundles_string);
    if (!in_array($entity->bundle(), $bundles)) {
      return;
    }
    if ($operation == 'update') {
      $path = $entity->toUrl()->toString();
    }
    elseif (\Drupal::hasService('pathauto.generator')) {
      $path_array = \Drupal::service('pathauto.generator')
        ->createEntityAlias($entity, 'insert');
      $path = $path_array['alias'];
    }
    if (!isset($path)) {
      $path = $entity->toUrl()->toString();
    }
    if (substr($path, 0, 1) !== '/') {
      $path = '/' . $path;
    }
    if ($entity->get('moderation_state')->value == 'published') {
      \Drupal::service('static_generator')->queuePage($path);
    }
    elseif ($entity->get('moderation_state')->value == 'archived') {
      \Drupal::service('static_generator')->deletePage($path);
    }
  }

  // Media.
  if ($entity->getEntityTypeId() === 'media') {
    // @todo Make picker for media bundles on settings page.
    //    $bundles_string = $this->configFactory->get('static_generator.settings')
    //      ->get('gen_media');
    //    $bundles = explode(',', $bundles_string);

    $bundles = [];
    $bundles[] = 'remote_video';
    if (!in_array($entity->bundle(), $bundles)) {
      return;
    }

    if ($operation == 'update') {
      $path = $entity->toUrl()->toString();
    }
    elseif (\Drupal::hasService('pathauto.generator')) {
      $path_array = \Drupal::service('pathauto.generator')
        ->createEntityAlias($entity, 'insert');
      $path = $path_array['alias'];
    }
    if (!isset($path)) {
      $path = $entity->toUrl()->toString();
    }
    if (substr($path, 0, 1) !== '/') {
      $path = '/' . $path;
    }
    if ($entity->get('moderation_state')->value == 'published') {
      \Drupal::service('static_generator')->queuePage($path);
    }
    elseif ($entity->get('moderation_state')->value == 'archived') {
      \Drupal::service('static_generator')->deletePage($path);
    }
  }

  // Menu Item.
  if ($entity->getEntityTypeId() === 'menu_link_content') {

    // Generate page for this link, children and siblings..
    $menu_link_uri = $entity->link->uri;
    $path = '/' . substr($menu_link_uri, 7);

    \Drupal::service('static_generator')
      ->generatePagesMenuChildrenSiblings($entity, $path);
  }

  // Block.
  //  if ($entity->getEntityTypeId() === 'block') {
  //    // @todo not sure if we need to handle blocks in real time. How would we know which page to generate?
  //    $block_id = $entity->toUrl()->toString();
  //    if ($entity->get('moderation_state')->value == 'published') {
  //      if (in_array($block_id, \Drupal\static_generator\StaticGenerator::BLOCK_IDS_ESI)) {
  //        \Drupal::service('static_generator')->generateBlock($block_id, $generate_blocks);
  //      }
  //    }
  //    elseif ($entity->get('moderation_state')->value == 'archived') {
  //      // @todo Not sure if block can be archived.
  //      \Drupal::service('static_generator')->deleteBlock($block_id);
  //    }
  //  }

}

/**
 * Implements hook_entity_delete().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function static_generator_entity_delete(EntityInterface $entity) {
  // Content entities only.
  if (!($entity->getEntityTypeId() === 'node')) {
    return;
  }
  else {
    $path = $entity->toUrl()->toString();
    \Drupal::service('static_generator')->deletePage($path);
  }
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function static_generator_form_alter(&$form, $form_state, $form_id) {
  $has_generate_permission = \Drupal\user\Entity\User::load(\Drupal::currentUser()
    ->id())->hasPermission('generate static pages');

  if ($has_generate_permission && substr($form_id,0,5) == 'node_' && \Drupal::service('static_generator')->endsWith($form_id,'_edit_form')) {
    $node = $form_state->getFormObject()->getEntity();
    if ($node instanceof \Drupal\node\NodeInterface) {
      if ($node->isPublished()) {
        \Drupal::service('static_generator')
          ->generationInfoForm('/node/' . $node->id(), $node, $form, TRUE);
      }
    }
  }

  if ($has_generate_permission && in_array($form_id, [
      'media_image_edit_form',
      'media_remote_video_edit_form',
    ])) {
    $media = $form_state->getFormObject()->getEntity();
    if ($media->isPublished()) {
      \Drupal::service('static_generator')
        ->generationInfoForm('/media/' . $media->id(), $media, $form, TRUE);
    }
  }
}


// as seen in the content_moderation_notifications.
// Implementing these hooks gives you a single place to react to content states changes.
